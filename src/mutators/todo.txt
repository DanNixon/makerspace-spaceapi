impl Mutation {
    #[tracing::instrument(skip(status))]
    fn mutate(&self, status: &mut Status, msg: &paho_mqtt::Message) {
        match self {
            Mutation::TemperatureSensorValue(name) => {
                debug!("Updating temperature sensor");
                if status.sensors.is_some() {
                    match status
                        .sensors
                        .as_mut()
                        .unwrap()
                        .temperature
                        .iter_mut()
                        .find(|s| match &s.metadata.name {
                            None => false,
                            Some(n) => n == name,
                        }) {
                        Some(sensor) => match msg.payload_str().parse() {
                            Ok(v) => {
                                info!("Set sensor value to {}", v);
                                sensor.value = v;
                            }
                            Err(e) => {
                                warn!("Failed to parse string as value ({})", e);
                            }
                        },
                        None => {
                            warn!("Failed to find sensor with name {}", name);
                        }
                    }
                }
            }
            Mutation::HumiditySensorValue(name) => {
                debug!("Updating humidity sensor");
                if status.sensors.is_some() {
                    match status
                        .sensors
                        .as_mut()
                        .unwrap()
                        .humidity
                        .iter_mut()
                        .find(|s| match &s.metadata.name {
                            None => false,
                            Some(n) => n == name,
                        }) {
                        Some(sensor) => match msg.payload_str().parse() {
                            Ok(v) => {
                                info!("Set sensor value to {}", v);
                                sensor.value = v;
                            }
                            Err(e) => {
                                warn!("Failed to parse string as value ({})", e);
                            }
                        },
                        None => {
                            warn!("Failed to find sensor with name {}", name);
                        }
                    }
                }
            }
            Mutation::StateOpen => {
                debug!("Updating state open");
                match msg.payload_str().parse() {
                    Ok(open) => {
                        info!("Set state.open to {}", open);
                        status.state.as_mut().unwrap().open = Some(open);
                    }
                    Err(e) => {
                        warn!("Failed to parse string as value ({})", e);
                    }
                }
            }
            Mutation::StateMessage => {
                debug!("Updating state message");
                let msg = if msg.payload_str().len() == 0 {
                    None
                } else {
                    Some(msg.payload_str().to_string())
                };
                info!("Set state message to {:?}", msg);
                status.state.as_mut().unwrap().message = msg;
            }
        }
    }
}
